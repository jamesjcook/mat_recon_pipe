function write_convenience_macro(data_buffer,openmacro_path,opt_struct,hf_path)

if opt_struct.ij_custom_macro
    %% custom macro
    openmacro_lines=strcat(...
        'channels=',num2str(d_struct.c),';\n' , ...
        'channel_alias="',opt_struct.channel_alias,'";\n',...
        'frames=', num2str(d_struct.t),';\n', ...
        'params=', num2str(d_struct.p),';\n', ...
        'slices=', num2str(d_struct.z),';\n', ...
        'volumes=', num2str(data_buffer.headfile.([data_tag 'volumes'])),';\n', ...
        'runno="', runno, '"',';\n', ...
        'runno_dir="', data_buffer.engine_constants.engine_work_directory, '/"+runno+""',';\n', ...
        'open_all_output="open";\n',...
        'if(slices==1){ open_all_output=""; }\n',...
        'sub_start=1',';\n', ...
        'sub_stop=sub_start+slices-1;\n', ...
        'for(framenum=1;framenum<=frames;framenum++) {\n', ...
        '    for(channelnum=1;channelnum<=channels;channelnum++) {\n', ...
        '    for(paramnum=1;paramnum<=params;paramnum++) {\n', ...
        '        if ( channels>1 ) { \n',...
        '            channel_code=substring(channel_alias,channelnum-1,channelnum);\n',...
        '        } else {\n',...
        '            channel_code="";\n',...
        '        }\n',...
        '        volumenum=(framenum-1)*params+paramnum;\n', ...
        '        if (volumes > 1 && volumes!=channels) {\n', ...
        '            num=d2s(volumenum-1,0);\n', ...
        '            digits=lengthOf(d2s(volumes/channels,0));\n', ...
        '            while(lengthOf(num)<digits && lengthOf(num) < 4 ) {\n', ...
        '               num="0"+num;\n', ...
        '            }\n', ...
        '            multi_suffix="_m"+num;\n', ...
        '        } else {\n', ...
        '          multi_suffix="";\n', ...
        '        }\n',...
        '\n', ...
        '        out_runno=""+runno+channel_code+multi_suffix;\n', ...
        '        output_dir=""+runno_dir+channel_code+multi_suffix+"/"+out_runno+"images";\n', ...
        '\n', ...
        '        if ( volumes < ', num2str(opt_struct.open_volume_limit), ' ) { \n', ...
        '            run("Raw...", "open="+output_dir+"/"+out_runno+"',...
        data_buffer.scanner_constants.scanner_tesla_image_code,...
        'imx.0001.raw image=[16-bit Unsigned] width=',...
        num2str(d_struct.x),' height=',num2str(d_struct.y),...
        ' offset=0 number="+slices+" gap=0 "+open_all_output+"");\n', ...
        '        }  else if ( volumenum == 1 ) {\n', ...
        '            run("Raw...", "open="+output_dir+"/"+out_runno+"',...
        data_buffer.scanner_constants.scanner_tesla_image_code,...
        'imx.0001.raw image=[16-bit Unsigned] width=', num2str(d_struct.x),...
        ' height=', num2str(d_struct.y),' offset=0 number="+slices+" gap=0 "+open_all_output+"");\n', ...
        '        } else  if ( volumenum == channels*frames) {\n', ...
        '            run("Raw...", "open="+output_dir+"/"+out_runno+"',...
        data_buffer.scanner_constants.scanner_tesla_image_code,...
        'imx.0001.raw image=[16-bit Unsigned] width=', num2str(d_struct.x),...
        ' height=', num2str(d_struct.y),' offset=0 number="+slices+" gap=0 "+open_all_output+"");\n', ...
        '        }\n', ...
        '        rename(out_runno);\n',...
        '    }\n', ...
        '    }\n', ...
        '}\n', ...
        'run("Tile");\n', ...
        'if(slices==1){\n',...
        '    setSlice(round(slices/2);\n',...
        '}\n',...
        '\n',...
        '\n');
    %             '        if ( !File.isDirectory(output_dir) ) {\n', ...
    %             '            print("  Imagej: making directory"+output_dir);\n', ...
    %             '            dirparts=split(output_dir,"/");\n', ...
    %             '            current="";\n', ...
    %             '            for (part=0;part<dirparts.length;part++) { \n', ...
    %             '                current=current+"/"+dirparts[part];\n', ...
    %             '                if (!File.isDirectory(current) ) {\n', ...
    %             '                    File.makeDirectory(current);\n', ...
    %             '                }\n', ...
    %             '            }\n', ...
    %             '         }\n',...
    %             '\n', ...
else
    openmacro_lines=sprintf('run("CIVM RunnoOpener", "headfile=%s loadallheadfiles max_vols=0 volume_combine_threshold=5 convert");\n',hf_path);
end
mfid=fopen(openmacro_path,'w');
fprintf(mfid,openmacro_lines);
fclose(mfid);
